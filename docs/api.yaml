openapi: 3.0.1

info:
  title: schedule-service
  version: 1
  x-amazon-apigateway-binary-media-types: ["application/csv", "text/csv"]
paths:
  /schedule:
    post:
      summary: schedule
      description: schedule a reminder
      tags:
        - schedule
      security: 
        - DefaultAuthorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CloudwatchSceduleFunction.Arn}/invocations
        responses:
          default:
            statusCode: 201

  /delete-schedule/{scheduleName}:
    post:
      summary: schedule
      description: delete schedule a reminder
      tags:
        - delete-schedule
      parameters:
        - name: scheduleName
          in: path
          required: true
          schema:
            type: string
      security: 
        - DefaultAuthorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CloudwatchDeleteScheduleFunction.Arn}/invocations
        responses:
          default:
            statusCode: 201

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{ "error": { "code": 400, "message": $context.error.messageString } }'

components:
  securitySchemes: 
    DefaultAuthorizer:
      type: apiKey
      name: "Authorization"
      in: header
      x-amazon-apigateway-authtype: "CUSTOM"
      x-amazon-apigateway-authorizer:
        authorizerResultTtlInSeconds: 0
        identitySource: "method.request.header.authorizationToken"
        authorizerUri: 
          Fn::ImportValue: "authorizerUri"
        type: "request"